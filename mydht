#!/usr/bin/env ruby

# require "awesome_print" # used for debugging


# class that will handle the dht
class MyDht
    attr_reader :nNodes, :firstNode, :lastNode, :output, :route, :keysTable, :routesTable
    # initial values for a empty dht
    def initialize 
        @nNodes = 0
        @lastNode = nil
        @firstNode = nil
        @output = Array.new
        @route = Array.new
        @keysTable = Hash.new
        @routesTable = Hash.new
    end
    
    # method that will feed the dht
    def feed
        line = gets
        i=1
        while(!line.nil?)
            line = line.delete("\n")
            opId, op, opA, opB = line.split(" ")
            case op
                when "E"
                    @nNodes+=1
                    addNode(opId, op, opA.to_i, opB)
                when "S"
                    @nNodes-=1
                    delNode(opId, op, opA.to_i, opB)
                when "I"
                    addKey(opB.to_i)
                    @route = Array.new
                when "L"
                    lookupKey(opA.to_i, opId, opB.to_i, opA)
                    formatAndPrintOutput(opId)
                    @route = Array.new
                    @output = Array.new
            end
            # print_debug(line,i)
            line=gets
            i+=1
        end
    end
    
    # add a new node into dht
    def addNode(opId, op, opA, opB) 
        if(@lastNode == nil || opA > @lastNode)
            @lastNode = opA
        end
        if(@firstNode == nil || opA < @firstNode)
            @firstNode = opA
        end
        @keysTable[opA] = Array.new
        @routesTable[opA] = createRoutesTable(opA)
        updateTable(opA)
        updateRoutesTable
    end
    
    # create routes table for a node
    def createRoutesTable(id) 
        routesMaxSize = Math::log(@nNodes, 2).floor
        i = 0
        m = @lastNode.to_s(2).length # bytes to represent the last node
        routeEntry = (id + (2**i)) % (2**m)
        routes = Array.new
        while ((@nNodes > 1) && (routes.size < routesMaxSize)) do
            for hashIndex in routeEntry .. @lastNode
                if(@keysTable[hashIndex] != nil && @keysTable[hashIndex] != "")
                    routes.push(hashIndex)
                    routes = routes.uniq
                    break
                end
            end
            i+=1
            routeEntry = (id + (2**i)) % (2**m)
        end
        return routes.sort
    end
    
    # update keys table
    def updateTable(key) 
        if(key == @lastNode)
            keys = @keysTable[@firstNode]
            if( (!keys.nil?) && (!keys.empty?) )
                fKeys = keys.select{ |a| a > @firstNode && a <= key }
                keys.delete_if{ |a| a > @firstNode && a <= key } 
                @keysTable[@firstNode] = keys
                @keysTable[key] = fKeys
            end
        else
            for i in (key + 1) .. @lastNode
                if(@keysTable[i] != nil && @keysTable[i] != "")
                    keys = @keysTable[i]
                    if(!keys.empty?)
                        fKeys = keys.select{ |a| a > i && a <= key }
                        keys.delete_if{ |a| a > i && a <= key } 
                        @keysTable[i] = keys
                        @keysTable[key] = fKeys
                    end
                    break
                end 
            end
        end
    end
    
    # update routes table from all nodes
    def updateRoutesTable 
        for i in @firstNode .. (@lastNode-1)
            if(@routesTable[i] != nil && @routesTable[i] != "")
                @routesTable[i] = createRoutesTable(i)
            end
        end
    end
    
    # delete a specif node
    def delNode(opId, op, opA, opB) 
        keysArray = @keysTable[opA]
        routeArray = @routesTable[opA]
        
        starter = opA
        if(starter == @lastNode)
            for i in (@lastNode - 1) .. 0
                if(@keysTable[i] != nil && @keysTable[i] != "")
                    @lastNode = i
                    break
                end
            end
            
            auxArray = @keysTable[@fistNode]
            auxArray.concat(keysArray)
            auxArray.sort! {|x, y| y <=> x}
            @keysTable[@fistNode] = auxArray
        else
            for i in starter .. @lastNode
                if(@keysTable[i] != nil && @keysTable[i] != "")
                    auxArray = @keysTable[i]
                    auxArray.concat(keysArray)
                    auxArray.sort! {|x, y| y <=> x}
                    @keysTable[i] = auxArray
                    if(@fistNode == starter)
                        @fistNode = i
                    end
                    break
                end
            end
        end
        
        @keysTable.delete(opA)
        @routesTable.delete(opA)
        
        if(@fistNode == opA)
            @fistNode = routeArray.first
        elsif @lastNode == opA
            updateLastNode
        end
        
        updateRoutesTable
    end
    
    # just change the last node when needed
    def updateLastNode 
        (@lastNode - 1).downto(@firstNode) do |i|
            if(@keysTable[i] != nil && @keysTable[i] != "")
                @lastNode = i
                break
            end
        end
    end
    
    # add a new key to the right node
    def addKey(key) 
        if(key > @lastNode)
            nodeKeys = @keysTable[@firstNode]
            nodeKeys.push(key)
        else
            for i in key .. @lastNode
                if( (@keysTable[i] != nil) && (@keysTable[i] != "") )
                    nodeKeys = @keysTable[i]
                    nodeKeys.push(key)
                    @keysTable[i] = nodeKeys
                    break
                end
            end
        end
    end
    
    # look up for a key in dht, and display the route
    def lookupKey(nodeRoute, id, findValue, firstElement) 
        # puts "nodeRoute: #{nodeRoute}"
        # puts "id: #{id}"
        # puts "findValue: #{findValue}"
        # puts "firstElement: #{firstElement}"
        # puts "~~~"
        keysArray = @keysTable[nodeRoute]
        if (keysArray.include?(findValue) or findValue == nodeRoute)
            outputString = "#{id} L #{findValue} {#{@route.join(",")}}"
            @output.push(outputString)
        else
            routes = @routesTable[nodeRoute]
            bvalue = 0
            routes.each do |routeValue|
                bvalue = routeValue
                if ((routeValue >= findValue) && (routeValue != nodeRoute))
                    @route.push(routeValue)
                    lookupKey(routeValue, id, findValue, firstElement)
                    bvalue = 0
                    break
                end
            end
            if(bvalue != 0)
                @route.push(bvalue)
                lookupKey(bvalue, id, findValue, firstElement)
            end
        end 
    end
    
    # format the output
    def formatAndPrintOutput(id)
        @output.each do |result|
            puts result
        end
        keys = @routesTable.keys 
        keys = keys.sort
        keys.each do |key|
            routes = @routesTable[key]
            puts "#{id} T #{key} {#{routes.join(",")}}"
        end
    end
    
    # def print_debug(line,i)
    #     puts "Linha #{i}: #{line}"
    #     self.instance_variables.each do |v|
    #         ap v.to_s+": "
    #         ap self.instance_eval(v.to_s)
    #     end
    #     puts
    #     puts "---------------------"
    #     puts
    # end
end

m= MyDht.new
m.feed
# m.print_debug("Final","")